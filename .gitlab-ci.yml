# Applies to all jobs, can be overridden in each
default:
    image:
        # Image from dockerhub per default. Specify full path to use a different image.
        name: alexpovel/latex
        # Override any entrypoint back to a naked shell so that job `script`s can be
        # executed normally.
        # See also: https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#overriding-the-entrypoint-of-an-image
        entrypoint: [ "" ]
    # LaTeX and pandoc stages both provide PDFs:
    artifacts:
        # artifacts.zip is renamed to current tag/branch:
        name: "$CI_COMMIT_REF_NAME"
        paths:
            # Return all found *.pdf-files using wildcard.
            # For example, a thesis and the accompanying presentation.
            - "*.pdf"
    # Run job 'only' if it fulfills certain criteria (BETTER: use `rules`):
    # only:
        # - tags

# Define some stages so to get rid of 'Test' as default:
stages:
    - prepare
    - build

insert_git_metadata:
    stage: prepare
    script:
        # Declare associative (-A) array with predefined GitLab CI variables.
        # The keys correspond to the command names found in the LaTeX code:
        - |
            declare -A GITINFO=(
                [GitVersion]=$CI_COMMIT_REF_NAME
                [GitShortHash]=$CI_COMMIT_SHORT_SHA
            )

        # Iterate over array and replace the LaTeX commands,
        # e.g. \newcommand*{\GitVersion}{n.a.},
        # with
        # e.g. \newcommand*{\GitVersion}{v1.00}.
        # Use double quotes to enable variable expansion.
        # Employ and use capture group \1 to replace current LaTeX command
        # (given by key in array) by corresponding value for that key.
        # Run on all class files (cls) found. Only do it once (no global option to sed),
        # for safety: the relevant \newcommand should only occur once.
        # Checking with `grep` is simpler/clearer than using sed's `q` option.
        - |
            for k in "${!GITINFO[@]}"
                do
                    grep --silent "${k}" *.cls || \
                        { \
                            echo "Failed to find (and therefore replace) '${k}'." && \
                            exit 1; \
                        };
                    sed --in-place "s~\(newcommand\*{\\\\$k}\){.*}~\1{${GITINFO[$k]}}~" *.cls
                done
    # Hand the processed *.cls file(s) to the next stage:
    artifacts:
        # Overrides default
        paths:
            # Hand over the modified file, otherwise the depending stage only gets the
            # default non-modified one.
            - "*.cls"
    needs: []
    # This *shouldn't* fail, but failure is not catastrophic:
    allow_failure: true

build_latex:
    stage: build
    script:
        # For debugging: show commands that will be used for compilation, as configured
        # after reading all found config (RC) files.
        # Looks like: https://tex.stackexchange.com/a/311753/120853
        - latexmk --commands
        # No *.tex-file given as argument to latexmk: run on all *.tex-files found in root.
        # Configure latexmk tool using '.latexmkrc' in project root.
        # After the run, display the relevant rules (for debugging).
        - latexmk --rules
    needs:
        - job: insert_git_metadata
          # Also get that job's artifacts (like what `dependencies` used to do):
          artifacts: true

build_pandoc:
    stage: build
    variables:
        README_BASENAME: "README"
    script:
        # Provide dynamic metadata for the date. All other settings are in the `defaults`
        # file.
        - |
            pandoc \
                --defaults=pandoc/defaults.yaml \
                --metadata=date:$(date --iso-8601) \
                --output=${README_BASENAME}.pdf \
                ${README_BASENAME}.md
    # Despite being in a later stage, specifying that this particular jobs 'needs'
    # no other job allows it run immediately, leading to concurrent running of stages
    # which would otherwise run serially, speeding up the pipeline
    needs: []
