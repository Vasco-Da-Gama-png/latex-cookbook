# Applies to all jobs, can be overridden in each
default:
    # Image from dockerhub per default. Specify full path to use a different image.
    image: alexpovel/latex
    # `retry` tries to fix this notorious issue
    # (ERROR: Job failed (system failure): Error: No such container: <container_id>):
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4450
    # As of 2020-04-13, Steve Azzopardi commented that it should be fixed from GitLab
    # version 12.10.
    #
    # Needs to be implemented for later jobs too, since those can apparently
    # still fail even though preceding stages have pulled successfully.
    retry:
        max: 1
        when: runner_system_failure
    # LaTeX and pandoc stages both provide PDFs:
    artifacts:
        # artifacts.zip is renamed to current tag/branch:
        name: "$CI_COMMIT_REF_NAME"
        paths:
            # Return all found *.pdf-files using wildcard.
            # For example, a thesis and the accompanying presentation.
            - "*.pdf"
    # Run job 'only' if it fulfills certain criteria:
    # only:
        # - tags

# Define some stages so to get rid of 'Test' as default:
stages:
    - preparation
    - pdf_building

replace_git_metadata:
    stage: preparation
    script:
        # Declare associative (-A) array with predefined GitLab CI variables.
        # The keys correspond to the command names found in the LaTeX code:
        - |
            declare -A GITINFO=(
                [GitVersion]=$CI_COMMIT_REF_NAME
                [GitShortHash]=$CI_COMMIT_SHORT_SHA
            )

        # Iterate over array and replace the LaTeX commands,
        # e.g. \newcommand*{\GitVersion}{n.a.},
        # with
        # e.g. \newcommand*{\GitVersion}{v1.00}.
        # Use double quotes to enable variable expansion.
        # Employ and use capture group \1 to replace current LaTeX command
        # (given by key in array) by corresponding value for that key.
        # Run on all class files (cls) found. Only do it once (no global option to sed),
        # for safety: \newcommand should only occur once anyway.
        - |
            for k in "${!GITINFO[@]}"
                do
                    sed -i "s~\(newcommand\*{\\\\$k}\){.*}~\1{${GITINFO[$k]}}~" *.cls
                done
    # Hand the processed *.cls file(s) to the next stage:
    artifacts:
        # Overrides default
        paths:
            - "*.cls"

compile_latex:
    stage: pdf_building
    script:
        # No *.tex-file given as argument to latexmk: run on all *.tex-files found in root.
        # Configure latexmk tool using '.latexmkrc' in project root.
        - latexmk
    dependencies:
        - replace_git_metadata

compile_pandoc:
    stage: pdf_building
    script:
        # Replace date metadata with current date.
        # Escape because of colon in script command.
        - 'sed -i "s~\(^date: \)\".*\"~\1\"$(date +"%B %-d, %Y")\"~" README.md'
        # pandoc looks for template with .latex suffix in current dir
        # Use lualatex for Unicode support
        - pandoc README.md \
            --template eisvogel --pdf-engine=lualatex --number-sections \
            -o README.pdf
